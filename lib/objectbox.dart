import 'package:path/path.dart' as p;
import 'package:path_provider/path_provider.dart';
import 'objectbox.g.dart'; // Generated file based on your models
import 'models/models.dart'; // Import all models (assuming you create models.dart barrel file later, or import individually)

class ObjectBox {
  /// The Store of this app. Provides access to the database.
  late final Store _store;

  // Optional: Pre-expose boxes for easier access
  late final Box<ShoppingList> shoppingListBox;
  late final Box<GroceryStore> groceryStoreBox;
  late final Box<ShoppingItem> shoppingItemBox;

  // Private constructor
  ObjectBox._create(this._store) {
    // Assign the boxes for convenience
    shoppingListBox = _store.box<ShoppingList>();
    groceryStoreBox = _store.box<GroceryStore>();
    shoppingItemBox = _store.box<ShoppingItem>();
  }

  /// Creates an instance of ObjectBox to use throughout the app.
  /// Needs to be called async-ly await ObjectBox.create()
  static Future<ObjectBox> create() async {
    // Ensure ObjectBox Flutter specific libs are loaded
    // WidgetsFlutterBinding.ensureInitialized(); // This is usually called in main()

    // Get the directory for storing the database file
    final docsDir = await getApplicationDocumentsDirectory();
    // Use the path package to join the directory path and database file name
    final dbPath = p.join(docsDir.path, "shopping_list_db");

    // The 'openStore' function is generated by ObjectBox generator
    final store = await openStore(directory: dbPath);

    // Create and return the ObjectBox instance
    return ObjectBox._create(store);
  }

  /// Closes the Store. Useful for clean shutdown but not always critical on mobile.
  void close() {
    _store.close();
  }

  /// Cleanup method for testing purposes
  Future<void> cleanupForTesting() async {
    // Close any open connections
    _store.close();
    
    // You could add code to clear specific boxes if needed
    // For example: shoppingListBox.removeAll();
  }

  // If you didn't pre-expose boxes above, you could use a generic getter:
  // Box<T> getBox<T>() => _store.box<T>();
}

// Optional: Create a barrel file 'lib/models/models.dart'
// export 'shopping_list.dart';
// export 'grocery_store.dart';
// export 'shopping_item.dart';
// This simplifies imports elsewhere.