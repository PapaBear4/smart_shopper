// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/brand.dart';
import 'models/grocery_store.dart';
import 'models/price_entry.dart';
import 'models/product_variant.dart';
import 'models/shopping_item.dart';
import 'models/shopping_list.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 1350387564383969056),
    name: 'Brand',
    lastPropertyId: const obx_int.IdUid(2, 7687436088201772380),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8761874532321917652),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 7687436088201772380),
        name: 'name',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'groceryStores',
        srcEntity: 'GroceryStore',
        srcField: 'brands',
      ),
      obx_int.ModelBacklink(
        name: 'shoppingItems',
        srcEntity: 'ShoppingItem',
        srcField: 'brand',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 5392232521263040000),
    name: 'GroceryStore',
    lastPropertyId: const obx_int.IdUid(5, 1326364750653525587),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 5743311374707640706),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5640327601109155288),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 2458881672330496623),
        name: 'website',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2634876967099437326),
        name: 'address',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 1326364750653525587),
        name: 'phoneNumber',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 1179179430474418289),
        name: 'brands',
        targetId: const obx_int.IdUid(1, 1350387564383969056),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 5884021774426625564),
    name: 'PriceEntry',
    lastPropertyId: const obx_int.IdUid(7, 5167489257107915554),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4053898171902608147),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8531733499047451153),
        name: 'price',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4169143285421413535),
        name: 'date',
        type: 10,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4935364066352572488),
        name: 'groceryStoreId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 1020527030735291276),
        relationTarget: 'GroceryStore',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 5167489257107915554),
        name: 'productVariantId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(5, 3592818062407922901),
        relationTarget: 'ProductVariant',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 6701175573460648360),
    name: 'ShoppingItem',
    lastPropertyId: const obx_int.IdUid(11, 7384634165614092262),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1433682486671584200),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6183159279299876135),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6531799950927374350),
        name: 'category',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2406488466200381600),
        name: 'quantity',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 3924568137145655625),
        name: 'unit',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4620948759756646472),
        name: 'isCompleted',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 803727051165036413),
        name: 'shoppingListId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 4104004541648570195),
        relationTarget: 'ShoppingList',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 557341323890659898),
        name: 'brandId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(4, 1359002738651244461),
        relationTarget: 'Brand',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 4060516909469705996),
        name: 'notes',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 5590610874088685524),
        name: 'desiredAttributes',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 7384634165614092262),
        name: 'preferredVariantId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(7, 1452162414297893229),
        relationTarget: 'ProductVariant',
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(2, 6021917186737555969),
        name: 'groceryStores',
        targetId: const obx_int.IdUid(2, 5392232521263040000),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 1820958202328536689),
    name: 'ShoppingList',
    lastPropertyId: const obx_int.IdUid(2, 9103335636842345087),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6299104716667177880),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 9103335636842345087),
        name: 'name',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'items',
        srcEntity: 'ShoppingItem',
        srcField: 'shoppingList',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 9125453582779863383),
    name: 'ProductVariant',
    lastPropertyId: const obx_int.IdUid(41, 8013425193315835219),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 8256650373857533366),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 496491443493904640),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 7505990523085777365),
        name: 'baseProductName',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 4263145842442598438),
        name: 'flavor',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6568078300506651180),
        name: 'packageSize',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 494061646670888266),
        name: 'isOrganic',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 6393508022193581249),
        name: 'isGlutenFree',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(8, 1750734653340309613),
        name: 'upcCode',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(9, 9094648843191831429),
        name: 'customAttributes',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(10, 4540736083573214785),
        name: 'brandId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(6, 3022673742405067456),
        relationTarget: 'Brand',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(11, 1283912408213000354),
        name: 'form',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(12, 8526117574851558435),
        name: 'containerType',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(13, 5730091907303705034),
        name: 'preparation',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(14, 4127569866953332163),
        name: 'maturity',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(15, 1484820910353940200),
        name: 'grade',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(16, 1412366170076418600),
        name: 'isNonGMO',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(17, 7282236726265154570),
        name: 'isVegan',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(18, 5452471868582992806),
        name: 'isVegetarian',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(19, 2309145336124724371),
        name: 'isDairyFree',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(20, 9189637219533242919),
        name: 'isNutFree',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(21, 1191468069703047315),
        name: 'isSoyFree',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(22, 6987917760159328793),
        name: 'isKosher',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(23, 6579103782426902767),
        name: 'isHalal',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(24, 3648157497315526927),
        name: 'isSugarFree',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(25, 3727851636902858405),
        name: 'isLowSodium',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(26, 7840656964303796260),
        name: 'isLowFat',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(27, 3555872595033659757),
        name: 'isLowCarb',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(28, 3442117152883599825),
        name: 'isHighProtein',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(29, 8565814710604168179),
        name: 'isWholeGrain',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(30, 5677410942254802687),
        name: 'hasNoAddedSugar',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(31, 8447875324182344270),
        name: 'hasArtificialSweeteners',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(32, 9039879816845286933),
        name: 'allergenInfo',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(33, 4184585622445500019),
        name: 'scent',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(34, 3069975963098773088),
        name: 'color',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(35, 4963746361523164467),
        name: 'mainIngredient',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(36, 3744774468374888429),
        name: 'secondaryIngredients',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(37, 3209074063036490479),
        name: 'spicinessLevel',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(38, 6302940555737560459),
        name: 'caffeineContent',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(39, 8953011148806672386),
        name: 'alcoholContent',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(40, 6255481921219461051),
        name: 'subBrand',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(41, 8013425193315835219),
        name: 'productLine',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(6, 9125453582779863383),
    lastIndexId: const obx_int.IdUid(7, 1452162414297893229),
    lastRelationId: const obx_int.IdUid(2, 6021917186737555969),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [1205661651718775251],
    retiredPropertyUids: const [2302950537414718852, 1077850470130638092],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Brand: obx_int.EntityDefinition<Brand>(
      model: _entities[0],
      toOneRelations: (Brand object) => [],
      toManyRelations: (Brand object) => {
        obx_int.RelInfo<GroceryStore>.toManyBacklink(1, object.id):
            object.groceryStores,
        obx_int.RelInfo<ShoppingItem>.toOneBacklink(
          8,
          object.id,
          (ShoppingItem srcObject) => srcObject.brand,
        ): object.shoppingItems,
      },
      getId: (Brand object) => object.id,
      setId: (Brand object, int id) {
        object.id = id;
      },
      objectToFB: (Brand object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(3);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final object = Brand(id: idParam, name: nameParam);
        obx_int.InternalToManyAccess.setRelInfo<Brand>(
          object.groceryStores,
          store,
          obx_int.RelInfo<GroceryStore>.toManyBacklink(1, object.id),
        );
        obx_int.InternalToManyAccess.setRelInfo<Brand>(
          object.shoppingItems,
          store,
          obx_int.RelInfo<ShoppingItem>.toOneBacklink(
            8,
            object.id,
            (ShoppingItem srcObject) => srcObject.brand,
          ),
        );
        return object;
      },
    ),
    GroceryStore: obx_int.EntityDefinition<GroceryStore>(
      model: _entities[1],
      toOneRelations: (GroceryStore object) => [],
      toManyRelations: (GroceryStore object) => {
        obx_int.RelInfo<GroceryStore>.toMany(1, object.id): object.brands,
      },
      getId: (GroceryStore object) => object.id,
      setId: (GroceryStore object, int id) {
        object.id = id;
      },
      objectToFB: (GroceryStore object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final websiteOffset = object.website == null
            ? null
            : fbb.writeString(object.website!);
        final addressOffset = object.address == null
            ? null
            : fbb.writeString(object.address!);
        final phoneNumberOffset = object.phoneNumber == null
            ? null
            : fbb.writeString(object.phoneNumber!);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, websiteOffset);
        fbb.addOffset(3, addressOffset);
        fbb.addOffset(4, phoneNumberOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final websiteParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final addressParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final phoneNumberParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final object = GroceryStore(
          id: idParam,
          name: nameParam,
          website: websiteParam,
          address: addressParam,
          phoneNumber: phoneNumberParam,
        );
        obx_int.InternalToManyAccess.setRelInfo<GroceryStore>(
          object.brands,
          store,
          obx_int.RelInfo<GroceryStore>.toMany(1, object.id),
        );
        return object;
      },
    ),
    PriceEntry: obx_int.EntityDefinition<PriceEntry>(
      model: _entities[2],
      toOneRelations: (PriceEntry object) => [
        object.groceryStore,
        object.productVariant,
      ],
      toManyRelations: (PriceEntry object) => {},
      getId: (PriceEntry object) => object.id,
      setId: (PriceEntry object, int id) {
        object.id = id;
      },
      objectToFB: (PriceEntry object, fb.Builder fbb) {
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addFloat64(1, object.price);
        fbb.addInt64(2, object.date.millisecondsSinceEpoch);
        fbb.addInt64(4, object.groceryStore.targetId);
        fbb.addInt64(6, object.productVariant.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final priceParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        final dateParam = DateTime.fromMillisecondsSinceEpoch(
          const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
        );
        final object = PriceEntry(
          id: idParam,
          price: priceParam,
          date: dateParam,
        );
        object.groceryStore.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.groceryStore.attach(store);
        object.productVariant.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        object.productVariant.attach(store);
        return object;
      },
    ),
    ShoppingItem: obx_int.EntityDefinition<ShoppingItem>(
      model: _entities[3],
      toOneRelations: (ShoppingItem object) => [
        object.shoppingList,
        object.brand,
        object.preferredVariant,
      ],
      toManyRelations: (ShoppingItem object) => {
        obx_int.RelInfo<ShoppingItem>.toMany(2, object.id):
            object.groceryStores,
      },
      getId: (ShoppingItem object) => object.id,
      setId: (ShoppingItem object, int id) {
        object.id = id;
      },
      objectToFB: (ShoppingItem object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final categoryOffset = object.category == null
            ? null
            : fbb.writeString(object.category!);
        final unitOffset = object.unit == null
            ? null
            : fbb.writeString(object.unit!);
        final notesOffset = object.notes == null
            ? null
            : fbb.writeString(object.notes!);
        final desiredAttributesOffset = fbb.writeList(
          object.desiredAttributes.map(fbb.writeString).toList(growable: false),
        );
        fbb.startTable(12);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, categoryOffset);
        fbb.addFloat64(3, object.quantity);
        fbb.addOffset(4, unitOffset);
        fbb.addBool(5, object.isCompleted);
        fbb.addInt64(6, object.shoppingList.targetId);
        fbb.addInt64(7, object.brand.targetId);
        fbb.addOffset(8, notesOffset);
        fbb.addOffset(9, desiredAttributesOffset);
        fbb.addInt64(10, object.preferredVariant.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final categoryParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final quantityParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final unitParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final isCompletedParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          14,
          false,
        );
        final notesParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 20);
        final desiredAttributesParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 22, []);
        final object = ShoppingItem(
          id: idParam,
          name: nameParam,
          category: categoryParam,
          quantity: quantityParam,
          unit: unitParam,
          isCompleted: isCompletedParam,
          notes: notesParam,
          desiredAttributes: desiredAttributesParam,
        );
        object.shoppingList.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          16,
          0,
        );
        object.shoppingList.attach(store);
        object.brand.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          18,
          0,
        );
        object.brand.attach(store);
        object.preferredVariant.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          24,
          0,
        );
        object.preferredVariant.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<ShoppingItem>(
          object.groceryStores,
          store,
          obx_int.RelInfo<ShoppingItem>.toMany(2, object.id),
        );
        return object;
      },
    ),
    ShoppingList: obx_int.EntityDefinition<ShoppingList>(
      model: _entities[4],
      toOneRelations: (ShoppingList object) => [],
      toManyRelations: (ShoppingList object) => {
        obx_int.RelInfo<ShoppingItem>.toOneBacklink(
          7,
          object.id,
          (ShoppingItem srcObject) => srcObject.shoppingList,
        ): object.items,
      },
      getId: (ShoppingList object) => object.id,
      setId: (ShoppingList object, int id) {
        object.id = id;
      },
      objectToFB: (ShoppingList object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        fbb.startTable(3);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final object = ShoppingList(id: idParam, name: nameParam);
        obx_int.InternalToManyAccess.setRelInfo<ShoppingList>(
          object.items,
          store,
          obx_int.RelInfo<ShoppingItem>.toOneBacklink(
            7,
            object.id,
            (ShoppingItem srcObject) => srcObject.shoppingList,
          ),
        );
        return object;
      },
    ),
    ProductVariant: obx_int.EntityDefinition<ProductVariant>(
      model: _entities[5],
      toOneRelations: (ProductVariant object) => [object.brand],
      toManyRelations: (ProductVariant object) => {},
      getId: (ProductVariant object) => object.id,
      setId: (ProductVariant object, int id) {
        object.id = id;
      },
      objectToFB: (ProductVariant object, fb.Builder fbb) {
        final nameOffset = fbb.writeString(object.name);
        final baseProductNameOffset = fbb.writeString(object.baseProductName);
        final flavorOffset = object.flavor == null
            ? null
            : fbb.writeString(object.flavor!);
        final packageSizeOffset = object.packageSize == null
            ? null
            : fbb.writeString(object.packageSize!);
        final upcCodeOffset = object.upcCode == null
            ? null
            : fbb.writeString(object.upcCode!);
        final customAttributesOffset = fbb.writeList(
          object.customAttributes.map(fbb.writeString).toList(growable: false),
        );
        final formOffset = object.form == null
            ? null
            : fbb.writeString(object.form!);
        final containerTypeOffset = object.containerType == null
            ? null
            : fbb.writeString(object.containerType!);
        final preparationOffset = object.preparation == null
            ? null
            : fbb.writeString(object.preparation!);
        final maturityOffset = object.maturity == null
            ? null
            : fbb.writeString(object.maturity!);
        final gradeOffset = object.grade == null
            ? null
            : fbb.writeString(object.grade!);
        final allergenInfoOffset = fbb.writeList(
          object.allergenInfo.map(fbb.writeString).toList(growable: false),
        );
        final scentOffset = object.scent == null
            ? null
            : fbb.writeString(object.scent!);
        final colorOffset = object.color == null
            ? null
            : fbb.writeString(object.color!);
        final mainIngredientOffset = object.mainIngredient == null
            ? null
            : fbb.writeString(object.mainIngredient!);
        final secondaryIngredientsOffset = fbb.writeList(
          object.secondaryIngredients
              .map(fbb.writeString)
              .toList(growable: false),
        );
        final spicinessLevelOffset = object.spicinessLevel == null
            ? null
            : fbb.writeString(object.spicinessLevel!);
        final caffeineContentOffset = object.caffeineContent == null
            ? null
            : fbb.writeString(object.caffeineContent!);
        final alcoholContentOffset = object.alcoholContent == null
            ? null
            : fbb.writeString(object.alcoholContent!);
        final subBrandOffset = object.subBrand == null
            ? null
            : fbb.writeString(object.subBrand!);
        final productLineOffset = object.productLine == null
            ? null
            : fbb.writeString(object.productLine!);
        fbb.startTable(42);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nameOffset);
        fbb.addOffset(2, baseProductNameOffset);
        fbb.addOffset(3, flavorOffset);
        fbb.addOffset(4, packageSizeOffset);
        fbb.addBool(5, object.isOrganic);
        fbb.addBool(6, object.isGlutenFree);
        fbb.addOffset(7, upcCodeOffset);
        fbb.addOffset(8, customAttributesOffset);
        fbb.addInt64(9, object.brand.targetId);
        fbb.addOffset(10, formOffset);
        fbb.addOffset(11, containerTypeOffset);
        fbb.addOffset(12, preparationOffset);
        fbb.addOffset(13, maturityOffset);
        fbb.addOffset(14, gradeOffset);
        fbb.addBool(15, object.isNonGMO);
        fbb.addBool(16, object.isVegan);
        fbb.addBool(17, object.isVegetarian);
        fbb.addBool(18, object.isDairyFree);
        fbb.addBool(19, object.isNutFree);
        fbb.addBool(20, object.isSoyFree);
        fbb.addBool(21, object.isKosher);
        fbb.addBool(22, object.isHalal);
        fbb.addBool(23, object.isSugarFree);
        fbb.addBool(24, object.isLowSodium);
        fbb.addBool(25, object.isLowFat);
        fbb.addBool(26, object.isLowCarb);
        fbb.addBool(27, object.isHighProtein);
        fbb.addBool(28, object.isWholeGrain);
        fbb.addBool(29, object.hasNoAddedSugar);
        fbb.addBool(30, object.hasArtificialSweeteners);
        fbb.addOffset(31, allergenInfoOffset);
        fbb.addOffset(32, scentOffset);
        fbb.addOffset(33, colorOffset);
        fbb.addOffset(34, mainIngredientOffset);
        fbb.addOffset(35, secondaryIngredientsOffset);
        fbb.addOffset(36, spicinessLevelOffset);
        fbb.addOffset(37, caffeineContentOffset);
        fbb.addOffset(38, alcoholContentOffset);
        fbb.addOffset(39, subBrandOffset);
        fbb.addOffset(40, productLineOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final idParam = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          4,
          0,
        );
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final baseProductNameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final flavorParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final packageSizeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 12);
        final isOrganicParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          14,
          false,
        );
        final isGlutenFreeParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          16,
          false,
        );
        final upcCodeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 18);
        final formParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 24);
        final containerTypeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 26);
        final preparationParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 28);
        final maturityParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 30);
        final gradeParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 32);
        final isNonGMOParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          34,
          false,
        );
        final isVeganParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          36,
          false,
        );
        final isVegetarianParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          38,
          false,
        );
        final isDairyFreeParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          40,
          false,
        );
        final isNutFreeParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          42,
          false,
        );
        final isSoyFreeParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          44,
          false,
        );
        final isKosherParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          46,
          false,
        );
        final isHalalParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          48,
          false,
        );
        final isSugarFreeParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          50,
          false,
        );
        final isLowSodiumParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          52,
          false,
        );
        final isLowFatParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          54,
          false,
        );
        final isLowCarbParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          56,
          false,
        );
        final isHighProteinParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          58,
          false,
        );
        final isWholeGrainParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          60,
          false,
        );
        final hasNoAddedSugarParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          62,
          false,
        );
        final hasArtificialSweetenersParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          64,
          false,
        );
        final allergenInfoParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 66, []);
        final scentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 68);
        final colorParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 70);
        final mainIngredientParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 72);
        final secondaryIngredientsParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 74, []);
        final spicinessLevelParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 76);
        final caffeineContentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 78);
        final alcoholContentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 80);
        final subBrandParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 82);
        final productLineParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 84);
        final customAttributesParam = const fb.ListReader<String>(
          fb.StringReader(asciiOptimization: true),
          lazy: false,
        ).vTableGet(buffer, rootOffset, 20, []);
        final object = ProductVariant(
          id: idParam,
          name: nameParam,
          baseProductName: baseProductNameParam,
          flavor: flavorParam,
          packageSize: packageSizeParam,
          isOrganic: isOrganicParam,
          isGlutenFree: isGlutenFreeParam,
          upcCode: upcCodeParam,
          form: formParam,
          containerType: containerTypeParam,
          preparation: preparationParam,
          maturity: maturityParam,
          grade: gradeParam,
          isNonGMO: isNonGMOParam,
          isVegan: isVeganParam,
          isVegetarian: isVegetarianParam,
          isDairyFree: isDairyFreeParam,
          isNutFree: isNutFreeParam,
          isSoyFree: isSoyFreeParam,
          isKosher: isKosherParam,
          isHalal: isHalalParam,
          isSugarFree: isSugarFreeParam,
          isLowSodium: isLowSodiumParam,
          isLowFat: isLowFatParam,
          isLowCarb: isLowCarbParam,
          isHighProtein: isHighProteinParam,
          isWholeGrain: isWholeGrainParam,
          hasNoAddedSugar: hasNoAddedSugarParam,
          hasArtificialSweeteners: hasArtificialSweetenersParam,
          allergenInfo: allergenInfoParam,
          scent: scentParam,
          color: colorParam,
          mainIngredient: mainIngredientParam,
          secondaryIngredients: secondaryIngredientsParam,
          spicinessLevel: spicinessLevelParam,
          caffeineContent: caffeineContentParam,
          alcoholContent: alcoholContentParam,
          subBrand: subBrandParam,
          productLine: productLineParam,
          customAttributes: customAttributesParam,
        );
        object.brand.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          22,
          0,
        );
        object.brand.attach(store);
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Brand] entity fields to define ObjectBox queries.
class Brand_ {
  /// See [Brand.id].
  static final id = obx.QueryIntegerProperty<Brand>(_entities[0].properties[0]);

  /// See [Brand.name].
  static final name = obx.QueryStringProperty<Brand>(
    _entities[0].properties[1],
  );

  /// see [Brand.shoppingItems]
  static final shoppingItems = obx.QueryBacklinkToMany<ShoppingItem, Brand>(
    ShoppingItem_.brand,
  );
}

/// [GroceryStore] entity fields to define ObjectBox queries.
class GroceryStore_ {
  /// See [GroceryStore.id].
  static final id = obx.QueryIntegerProperty<GroceryStore>(
    _entities[1].properties[0],
  );

  /// See [GroceryStore.name].
  static final name = obx.QueryStringProperty<GroceryStore>(
    _entities[1].properties[1],
  );

  /// See [GroceryStore.website].
  static final website = obx.QueryStringProperty<GroceryStore>(
    _entities[1].properties[2],
  );

  /// See [GroceryStore.address].
  static final address = obx.QueryStringProperty<GroceryStore>(
    _entities[1].properties[3],
  );

  /// See [GroceryStore.phoneNumber].
  static final phoneNumber = obx.QueryStringProperty<GroceryStore>(
    _entities[1].properties[4],
  );

  /// see [GroceryStore.brands]
  static final brands = obx.QueryRelationToMany<GroceryStore, Brand>(
    _entities[1].relations[0],
  );
}

/// [PriceEntry] entity fields to define ObjectBox queries.
class PriceEntry_ {
  /// See [PriceEntry.id].
  static final id = obx.QueryIntegerProperty<PriceEntry>(
    _entities[2].properties[0],
  );

  /// See [PriceEntry.price].
  static final price = obx.QueryDoubleProperty<PriceEntry>(
    _entities[2].properties[1],
  );

  /// See [PriceEntry.date].
  static final date = obx.QueryDateProperty<PriceEntry>(
    _entities[2].properties[2],
  );

  /// See [PriceEntry.groceryStore].
  static final groceryStore = obx.QueryRelationToOne<PriceEntry, GroceryStore>(
    _entities[2].properties[3],
  );

  /// See [PriceEntry.productVariant].
  static final productVariant =
      obx.QueryRelationToOne<PriceEntry, ProductVariant>(
        _entities[2].properties[4],
      );
}

/// [ShoppingItem] entity fields to define ObjectBox queries.
class ShoppingItem_ {
  /// See [ShoppingItem.id].
  static final id = obx.QueryIntegerProperty<ShoppingItem>(
    _entities[3].properties[0],
  );

  /// See [ShoppingItem.name].
  static final name = obx.QueryStringProperty<ShoppingItem>(
    _entities[3].properties[1],
  );

  /// See [ShoppingItem.category].
  static final category = obx.QueryStringProperty<ShoppingItem>(
    _entities[3].properties[2],
  );

  /// See [ShoppingItem.quantity].
  static final quantity = obx.QueryDoubleProperty<ShoppingItem>(
    _entities[3].properties[3],
  );

  /// See [ShoppingItem.unit].
  static final unit = obx.QueryStringProperty<ShoppingItem>(
    _entities[3].properties[4],
  );

  /// See [ShoppingItem.isCompleted].
  static final isCompleted = obx.QueryBooleanProperty<ShoppingItem>(
    _entities[3].properties[5],
  );

  /// See [ShoppingItem.shoppingList].
  static final shoppingList =
      obx.QueryRelationToOne<ShoppingItem, ShoppingList>(
        _entities[3].properties[6],
      );

  /// See [ShoppingItem.brand].
  static final brand = obx.QueryRelationToOne<ShoppingItem, Brand>(
    _entities[3].properties[7],
  );

  /// See [ShoppingItem.notes].
  static final notes = obx.QueryStringProperty<ShoppingItem>(
    _entities[3].properties[8],
  );

  /// See [ShoppingItem.desiredAttributes].
  static final desiredAttributes = obx.QueryStringVectorProperty<ShoppingItem>(
    _entities[3].properties[9],
  );

  /// See [ShoppingItem.preferredVariant].
  static final preferredVariant =
      obx.QueryRelationToOne<ShoppingItem, ProductVariant>(
        _entities[3].properties[10],
      );

  /// see [ShoppingItem.groceryStores]
  static final groceryStores =
      obx.QueryRelationToMany<ShoppingItem, GroceryStore>(
        _entities[3].relations[0],
      );
}

/// [ShoppingList] entity fields to define ObjectBox queries.
class ShoppingList_ {
  /// See [ShoppingList.id].
  static final id = obx.QueryIntegerProperty<ShoppingList>(
    _entities[4].properties[0],
  );

  /// See [ShoppingList.name].
  static final name = obx.QueryStringProperty<ShoppingList>(
    _entities[4].properties[1],
  );

  /// see [ShoppingList.items]
  static final items = obx.QueryBacklinkToMany<ShoppingItem, ShoppingList>(
    ShoppingItem_.shoppingList,
  );
}

/// [ProductVariant] entity fields to define ObjectBox queries.
class ProductVariant_ {
  /// See [ProductVariant.id].
  static final id = obx.QueryIntegerProperty<ProductVariant>(
    _entities[5].properties[0],
  );

  /// See [ProductVariant.name].
  static final name = obx.QueryStringProperty<ProductVariant>(
    _entities[5].properties[1],
  );

  /// See [ProductVariant.baseProductName].
  static final baseProductName = obx.QueryStringProperty<ProductVariant>(
    _entities[5].properties[2],
  );

  /// See [ProductVariant.flavor].
  static final flavor = obx.QueryStringProperty<ProductVariant>(
    _entities[5].properties[3],
  );

  /// See [ProductVariant.packageSize].
  static final packageSize = obx.QueryStringProperty<ProductVariant>(
    _entities[5].properties[4],
  );

  /// See [ProductVariant.isOrganic].
  static final isOrganic = obx.QueryBooleanProperty<ProductVariant>(
    _entities[5].properties[5],
  );

  /// See [ProductVariant.isGlutenFree].
  static final isGlutenFree = obx.QueryBooleanProperty<ProductVariant>(
    _entities[5].properties[6],
  );

  /// See [ProductVariant.upcCode].
  static final upcCode = obx.QueryStringProperty<ProductVariant>(
    _entities[5].properties[7],
  );

  /// See [ProductVariant.customAttributes].
  static final customAttributes = obx.QueryStringVectorProperty<ProductVariant>(
    _entities[5].properties[8],
  );

  /// See [ProductVariant.brand].
  static final brand = obx.QueryRelationToOne<ProductVariant, Brand>(
    _entities[5].properties[9],
  );

  /// See [ProductVariant.form].
  static final form = obx.QueryStringProperty<ProductVariant>(
    _entities[5].properties[10],
  );

  /// See [ProductVariant.containerType].
  static final containerType = obx.QueryStringProperty<ProductVariant>(
    _entities[5].properties[11],
  );

  /// See [ProductVariant.preparation].
  static final preparation = obx.QueryStringProperty<ProductVariant>(
    _entities[5].properties[12],
  );

  /// See [ProductVariant.maturity].
  static final maturity = obx.QueryStringProperty<ProductVariant>(
    _entities[5].properties[13],
  );

  /// See [ProductVariant.grade].
  static final grade = obx.QueryStringProperty<ProductVariant>(
    _entities[5].properties[14],
  );

  /// See [ProductVariant.isNonGMO].
  static final isNonGMO = obx.QueryBooleanProperty<ProductVariant>(
    _entities[5].properties[15],
  );

  /// See [ProductVariant.isVegan].
  static final isVegan = obx.QueryBooleanProperty<ProductVariant>(
    _entities[5].properties[16],
  );

  /// See [ProductVariant.isVegetarian].
  static final isVegetarian = obx.QueryBooleanProperty<ProductVariant>(
    _entities[5].properties[17],
  );

  /// See [ProductVariant.isDairyFree].
  static final isDairyFree = obx.QueryBooleanProperty<ProductVariant>(
    _entities[5].properties[18],
  );

  /// See [ProductVariant.isNutFree].
  static final isNutFree = obx.QueryBooleanProperty<ProductVariant>(
    _entities[5].properties[19],
  );

  /// See [ProductVariant.isSoyFree].
  static final isSoyFree = obx.QueryBooleanProperty<ProductVariant>(
    _entities[5].properties[20],
  );

  /// See [ProductVariant.isKosher].
  static final isKosher = obx.QueryBooleanProperty<ProductVariant>(
    _entities[5].properties[21],
  );

  /// See [ProductVariant.isHalal].
  static final isHalal = obx.QueryBooleanProperty<ProductVariant>(
    _entities[5].properties[22],
  );

  /// See [ProductVariant.isSugarFree].
  static final isSugarFree = obx.QueryBooleanProperty<ProductVariant>(
    _entities[5].properties[23],
  );

  /// See [ProductVariant.isLowSodium].
  static final isLowSodium = obx.QueryBooleanProperty<ProductVariant>(
    _entities[5].properties[24],
  );

  /// See [ProductVariant.isLowFat].
  static final isLowFat = obx.QueryBooleanProperty<ProductVariant>(
    _entities[5].properties[25],
  );

  /// See [ProductVariant.isLowCarb].
  static final isLowCarb = obx.QueryBooleanProperty<ProductVariant>(
    _entities[5].properties[26],
  );

  /// See [ProductVariant.isHighProtein].
  static final isHighProtein = obx.QueryBooleanProperty<ProductVariant>(
    _entities[5].properties[27],
  );

  /// See [ProductVariant.isWholeGrain].
  static final isWholeGrain = obx.QueryBooleanProperty<ProductVariant>(
    _entities[5].properties[28],
  );

  /// See [ProductVariant.hasNoAddedSugar].
  static final hasNoAddedSugar = obx.QueryBooleanProperty<ProductVariant>(
    _entities[5].properties[29],
  );

  /// See [ProductVariant.hasArtificialSweeteners].
  static final hasArtificialSweeteners =
      obx.QueryBooleanProperty<ProductVariant>(_entities[5].properties[30]);

  /// See [ProductVariant.allergenInfo].
  static final allergenInfo = obx.QueryStringVectorProperty<ProductVariant>(
    _entities[5].properties[31],
  );

  /// See [ProductVariant.scent].
  static final scent = obx.QueryStringProperty<ProductVariant>(
    _entities[5].properties[32],
  );

  /// See [ProductVariant.color].
  static final color = obx.QueryStringProperty<ProductVariant>(
    _entities[5].properties[33],
  );

  /// See [ProductVariant.mainIngredient].
  static final mainIngredient = obx.QueryStringProperty<ProductVariant>(
    _entities[5].properties[34],
  );

  /// See [ProductVariant.secondaryIngredients].
  static final secondaryIngredients =
      obx.QueryStringVectorProperty<ProductVariant>(
        _entities[5].properties[35],
      );

  /// See [ProductVariant.spicinessLevel].
  static final spicinessLevel = obx.QueryStringProperty<ProductVariant>(
    _entities[5].properties[36],
  );

  /// See [ProductVariant.caffeineContent].
  static final caffeineContent = obx.QueryStringProperty<ProductVariant>(
    _entities[5].properties[37],
  );

  /// See [ProductVariant.alcoholContent].
  static final alcoholContent = obx.QueryStringProperty<ProductVariant>(
    _entities[5].properties[38],
  );

  /// See [ProductVariant.subBrand].
  static final subBrand = obx.QueryStringProperty<ProductVariant>(
    _entities[5].properties[39],
  );

  /// See [ProductVariant.productLine].
  static final productLine = obx.QueryStringProperty<ProductVariant>(
    _entities[5].properties[40],
  );
}
