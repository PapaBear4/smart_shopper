// This imports the generated file that contains the openStore() function
// and entity model definitions for ObjectBox.
import 'objectbox.g.dart'; 
// Import your models barrel file to make model types known.
import 'models/models.dart';

/// A helper class to manage the ObjectBox store and provide access to entity boxes.
class ObjectBoxHelper {
  /// The ObjectBox store instance.
  late final Store _store;

  // Declare Box instances for each of your entities.
  // These will be initialized in the _create private constructor.
  late final Box<Brand> brandBox;
  late final Box<PriceEntry> priceEntryBox;
  late final Box<GroceryStore> groceryStoreBox;
  late final Box<ShoppingItem> shoppingItemBox;
  late final Box<ShoppingList> shoppingListBox;
  late final Box<ProductVariant> productVariantBox; // Added
  late final Box<SubBrand> subBrandBox;
  late final Box<ProductLine> productLineBox;

  /// Private constructor to initialize the store and boxes.
  /// This is called by the static `create` method.
  ObjectBoxHelper._create(this._store) {
    // Initialize all your entity boxes here
    brandBox = _store.box<Brand>();
    priceEntryBox = _store.box<PriceEntry>();
    groceryStoreBox = _store.box<GroceryStore>();
    shoppingItemBox = _store.box<ShoppingItem>();
    shoppingListBox = _store.box<ShoppingList>();
    productVariantBox = _store.box<ProductVariant>(); // Added
    subBrandBox = _store.box<SubBrand>();
    productLineBox = _store.box<ProductLine>();
  }

  /// Creates and initializes an ObjectBoxHelper instance.
  /// 
  /// This static method should be called once at app startup (e.g., in main.dart)
  /// to set up the database.
  static Future<ObjectBoxHelper> create() async {
    // The openStore() function is generated by ObjectBox (in objectbox.g.dart)
    // and opens the database, creating it if it doesn't exist.
    final store = await openStore();
    return ObjectBoxHelper._create(store);
  }

  /// Clears all data from all entity boxes.
  Future<void> clearAllData() async {
    // It's good practice to run this in a write transaction
    // if multiple boxes are being cleared, though removeAll() on each box
    // is usually transactional itself.
    // For simplicity and clarity, we'll clear them one by one.
    // The order typically doesn't matter unless there are specific
    // inter-dependencies you need to manage manually (rare).
    await brandBox.removeAllAsync();
    await priceEntryBox.removeAllAsync();
    await shoppingItemBox.removeAllAsync(); // Clear items before lists if items have relations to lists
    await shoppingListBox.removeAllAsync();
    await groceryStoreBox.removeAllAsync(); // Clear stores last if other entities relate to them
    await productVariantBox.removeAllAsync(); // Added
    await subBrandBox.removeAllAsync();
    await productLineBox.removeAllAsync();

    // Alternatively, ObjectBox provides a way to delete all objects of all types,
    // but it's often safer to be explicit if you want to ensure specific order
    // or if you might not want to clear *everything* in the future.
    // Example: _store.removeAllObjects(); (This is a more direct way)
    // For this helper, explicit removal is fine.
  }
}
